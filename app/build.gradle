apply plugin: 'com.android.application'
apply plugin: 'com.tinkerun.app'


buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "com.tinkerun:tinkerun-gradle-plugin:${VERSION_NAME}"
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.example.laotian.myapplication"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "PLATFORM", "\"all\""
        multiDexEnabled true
//        multiDexKeepProguard file("tinker_multidexkeep.pro")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        //正常包

        normal {
            applicationId "com.tinkerun.app"
        }
        //销售人员演示包
        sales {
            applicationId "com.tinkerun.appsales"
        }
    }

}
tinkerun{
//    enabled false
//    configField("config1","value1")
//    configField("config2","haha")
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile project(':tinkerun-android-lib')
//    compile("com.tinkerun:tinkerun-android-lib:${VERSION_NAME}")
//    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    compile 'com.android.support:multidex:1.0.1'
}


project.afterEvaluate {

    android.applicationVariants.all { variant ->

//      println

        def variantOutput = variant.outputs.first()
        def variantName = variant.name.capitalize()
        def variantData = variant.variantData
        def resDir

        if (variantOutput.processResources.properties['resDir'] != null) {
            resDir = variantOutput.processResources.resDir
        } else if (variantOutput.processResources.properties['inputResourcesDir'] != null) {
            resDir = variantOutput.processResources.inputResourcesDir.getFiles().first()
        }

        println "resDir="+resDir

    }
}